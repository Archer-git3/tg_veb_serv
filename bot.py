import os
import json
import asyncio

from datetime import datetime
from telethon import TelegramClient, events, errors, types
from telethon.sessions import StringSession
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import time
import pickle  # –î–æ–¥–∞–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±—ñ–Ω–∞—Ä–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
API_ID = 29148113
API_HASH = "0fba92868b9d99d1e63583a8fb751fb4"
BOT_TOKEN = "7603687034:AAG9102_4yFSuHrwE17FgO-Fc8nnfL1Z4-8"
ACCOUNTS_FILE = "telegram_accounts.json"  # –ó–º—ñ–Ω–∏–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–∞ pkl
NOTIFICATION_CHATS_FILE = "notification_chats.json"  # –ó–º—ñ–Ω–∏–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–∞ pkl

SESSION_TIMEOUT = 60
ACCOUNTS_CHECK_INTERVAL = 30

# –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (user_id)
SPECIAL_USERS = ["fgtaaaqd", "—ñ–Ω—à–∏–π–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"]


# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
clients = {}
notification_chats = {}
admins = set()
message_queue = asyncio.Queue()
last_accounts_check = 0
last_accounts_mtime = 0


class AccountClient:
    def __init__(self, account_data):
        self.account_data = account_data
        self.client = None
        self.is_running = False
        self.me = None
        self.is_special = account_data.get('is_special', False)
        self.last_updated = account_data.get('last_updated')
        if isinstance(self.last_updated, str):
            try:
                self.last_updated = datetime.fromisoformat(self.last_updated)
            except ValueError:
                self.last_updated = datetime.now()

    async def start(self):
        if self.client and self.client.is_connected():
            return True

        try:
            self.client = TelegramClient(
                StringSession(self.account_data['session_string']),
                API_ID,
                API_HASH,
                timeout=SESSION_TIMEOUT
            )
            await self.client.connect()

            if not await self.client.is_user_authorized():
                return False

            self.me = await self.client.get_me()
            self.is_running = True
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–ª—ñ—î–Ω—Ç–∞ {self.account_data['name']}: {e}")
            return False

    async def stop(self):
        if self.client and self.client.is_connected():
            await self.client.disconnect()
        self.is_running = False


async def load_accounts():
    global last_accounts_mtime, admins

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        if not os.path.exists(ACCOUNTS_FILE):
            logger.warning("–§–∞–π–ª –∞–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É
        current_mtime = os.path.getmtime(ACCOUNTS_FILE)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –∑–º—ñ–Ω–∏–≤—Å—è
        if current_mtime <= last_accounts_mtime:
            return False

        last_accounts_mtime = current_mtime

        # –ß–∏—Ç–∞—î–º–æ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é pickle
        with open(ACCOUNTS_FILE, 'rb') as f:
            data = pickle.load(f)

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫–∞—É–Ω—Ç–∏ –∑ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö
        accounts = data.get("accounts", [])
        if not accounts:
            logger.warning("–§–∞–π–ª –∞–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö")
            return False

        # –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–ª—ñ—î–Ω—Ç–∏
        for client in list(clients.values()):
            await client.stop()
        clients.clear()

        # –û—á–∏—â–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ–≤
        admins.clear()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—ñ –∞–∫–∞—É–Ω—Ç–∏
        for account in accounts:
            if account.get('skip_check', False):
                continue

            client = AccountClient(account)
            if await client.start():
                clients[account['phone']] = client
                logger.info(f"–ê–∫–∞—É–Ω—Ç {account['name']} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

                # –Ø–∫—â–æ –∞–∫–∞—É–Ω—Ç —î –∞–¥–º—ñ–Ω–æ–º, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ user_id
                if account.get('is_admin', False) and client.me:
                    admins.add(client.me.id)
                    logger.info(f"–î–æ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {client.me.id}")

        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
        return False


async def load_notification_chats():
    global notification_chats
    try:
        if os.path.exists(NOTIFICATION_CHATS_FILE):
            with open(NOTIFICATION_CHATS_FILE, 'rb') as f:
                notification_chats = pickle.load(f)

                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                for chat_id, settings in notification_chats.items():
                    username = settings.get('username')
                    if username:
                        settings['is_special'] = username.lower() in [u.lower() for u in SPECIAL_USERS]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤: {e}")
        notification_chats = {}


async def save_notification_chats():
    try:
        with open(NOTIFICATION_CHATS_FILE, 'wb') as f:
            pickle.dump(notification_chats, f)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤: {e}")


async def message_listener(client: AccountClient):
    @client.client.on(events.NewMessage(incoming=True))
    async def handler(event):
        try:
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–ª–∞—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if event.message.sender_id == client.me.id:
                return

            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç—ñ–≤
            sender = await event.get_sender()
            if isinstance(sender, types.User) and sender.bot:
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not isinstance(event.message.peer_id, types.PeerUser):
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            sender_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            if sender:
                sender_name = sender.username or f"{sender.first_name or ''} {sender.last_name or ''}".strip()
                if not sender_name:
                    sender_name = f"user_{sender.id}"

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –¥—ñ–∞–ª–æ–∑—ñ
            is_first_message = await is_first_in_dialog(client, event.message.peer_id.user_id)

            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text = ""
            if event.message.text:
                message_text = event.message.text[:1000] + '...' if len(
                    event.message.text) > 1000 else event.message.text
            elif event.message.media:
                message_text = "üì∑ –ú–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"

            message_info = {
                'account': client.account_data['name'],
                'sender': sender_name,
                'text': message_text,
                'date': event.message.date.isoformat(),
                'phone': client.account_data['phone'],
                'group': client.account_data['group'],
                'sender_id': sender.id if sender else 0,
                'is_first': is_first_message,
                'is_special': client.is_special
            }
            await message_queue.put(message_info)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


async def is_first_in_dialog(client, user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º —É –¥—ñ–∞–ª–æ–∑—ñ"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥—ñ–∞–ª–æ–≥—É
        messages = await client.client.get_messages(
            user_id,
            limit=4,  # –ë–µ—Ä–µ–º–æ 2 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ
            reverse=True
        )

        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –º–µ–Ω—à–µ 2, –∑–Ω–∞—á–∏—Ç—å —Ü–µ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return len(messages) < 2
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó –¥—ñ–∞–ª–æ–≥—É: {e}")
        return False


async def process_message_queue(bot: Bot):
    while True:
        message = await message_queue.get()
        for chat_id_str, settings in notification_chats.items():
            try:
                # –î–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ - —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≥—Ä—É–ø
                #if not message.get('is_special', False):
                # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø–∏
                if 'groups' not in settings or message['group'] not in settings['groups']:
                    continue

                # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                first_msg_info = "üåü **–ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!**\n" if message['is_first'] else ""

                # –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
                special_indicator = "‚≠ê –°–ü–ï–¶–Ü–ê–õ–¨–ù–ò–ô –ê–ö–ê–£–ù–¢ ‚≠ê\n" if message.get('is_special', False) else ""

                text = (
                    f"üîî **–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!**\n"
                    f"{special_indicator}"
                    f"{first_msg_info}"
                    f"üë§ –ê–∫–∞—É–Ω—Ç: `{message['account']}`\n"
                    f"üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: `{message['sender']}`\n"
                    f"üìÖ –î–∞—Ç–∞: `{message['date']}`\n"
                    f"üè∑Ô∏è –ì—Ä—É–ø–∞: `{message['group']}`\n"
                    f"\n{message['text']}"
                )
                await bot.send_message(
                    chat_id=int(chat_id_str),
                    text=text,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
        message_queue.task_done()


def is_admin(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in admins

def has_admin_rights(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in admins or user_id in SPECIAL_USERS


async def group_selection_required( update: Update, context: ContextTypes.DEFAULT_TYPE, handler):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–±—ñ—Ä –≥—Ä—É–ø"""
    user_id = update.effective_user.id
    query = update.callback_query
    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    settings = notification_chats.get(chat_id_str, {})
    username = settings.get('username')
    is_special = username and username.lower() in [u.lower() for u in SPECIAL_USERS]
    # –¢—ñ–ª—å–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –≤–∏–±–∏—Ä–∞—Ç–∏ –≥—Ä—É–ø–∏


    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
    return await handler(update, context)

async def admin_required(update: Update, context: ContextTypes.DEFAULT_TYPE, handler):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id

    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id) and user_id not in SPECIAL_USERS:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        elif update.message:
            await update.message.reply_text("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return None

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
    return await handler(update, context)


async def show_accessible_groups(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    username = query.from_user.username
    is_special = username and username.lower() in [u.lower() for u in SPECIAL_USERS]
    chat_id_str = str(query.message.chat_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É
    settings = notification_chats.get(chat_id_str, {})
    user_groups = settings.get('groups', [])

    # –®—É–∫–∞—î–º–æ –≥—Ä—É–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –π–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
    user_group = None
    if not is_special:
        # –®—É–∫–∞—î–º–æ –∞–∫–∞—É–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for client in clients.values():
            if client.me and client.me.id == user_id:
                user_group = client.account_data.get('group', '')
                break

        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if not user_group:
            user_group = username if username else f"ID: {user_id}"

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏
    if is_special:
        # –î–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ - –≤—Å—ñ –æ–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏
        groups_text = "üè∑Ô∏è –í–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏:\n\n" + "\n".join(f"‚Ä¢ `{group}`" for group in user_groups)
        if not user_groups:
            groups_text = "‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ '‚ûï –û–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É'."
    else:
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ - —Ç—ñ–ª—å–∫–∏ —ó—Ö –≥—Ä—É–ø–∞
        groups_text = f"üè∑Ô∏è –í–∞—à–∞ –≥—Ä—É–ø–∞: `{user_group}`"

    await query.edit_message_text(
        groups_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≤–∏–±–æ—Ä—É –≥—Ä—É–ø (–¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
async def show_group_selection(query, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏ –∑ —É—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
    all_groups = set()
    for client in clients.values():
        all_groups.add(client.account_data['group'])

    if not all_groups:
        await query.edit_message_text("‚ÑπÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø –¥–ª—è –≤–∏–±–æ—Ä—É.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥—Ä—É–ø
    keyboard = []
    current_row = []

    for group in sorted(all_groups):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä—É–ø–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞
        is_selected = False
        chat_id_str = str(query.message.chat_id)
        if chat_id_str in notification_chats and group in notification_chats[chat_id_str].get('groups', []):
            is_selected = True

        btn_text = f"‚úÖ {group}" if is_selected else group
        current_row.append(InlineKeyboardButton(btn_text, callback_data=f"toggle_group:{group}"))

        if len(current_row) == 2:
            keyboard.append(current_row)
            current_row = []

    if current_row:
        keyboard.append(current_row)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è
    keyboard.append([
        InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="save_groups"),
        InlineKeyboardButton("üßπ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ", callback_data="reset_groups"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    selected_count = 0
    chat_id_str = str(query.message.chat_id)
    if chat_id_str in notification_chats:
        selected_count = len(notification_chats[chat_id_str].get('groups', []))

    await query.edit_message_text(
        f"üè∑Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–≤–∏–±—Ä–∞–Ω–æ: {selected_count}):\n\n"
        "‚ÑπÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≥—Ä—É–ø—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó –∑—ñ —Å–ø–∏—Å–∫—É",
        reply_markup=reply_markup
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥—Ä—É–ø
async def group_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "select_group":
        await show_group_selection(query, context)
    elif query.data.startswith("toggle_group:"):
        await toggle_group_handler(update, context)
    elif query.data == "save_groups":
        await save_groups_handler(update, context)
    elif query.data == "reset_groups":
        await reset_groups_handler(update, context)
    elif query.data == "back_to_main":
        await start(update, context)


async def toggle_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    _, group = query.data.split(':')

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∞—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if chat_id_str not in notification_chats:
        notification_chats[chat_id_str] = {
            'user_id': query.from_user.id,
            'groups': []
        }

    settings = notification_chats[chat_id_str]

    # –î–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É–ø—É
    if group in settings['groups']:
        settings['groups'].remove(group)
    else:
        settings['groups'].append(group)

    await save_notification_chats()
    await show_group_selection(query, context)


async def save_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    selected_count = 0

    if chat_id_str in notification_chats:
        selected_count = len(notification_chats[chat_id_str].get('groups', []))

    await query.edit_message_text(
        f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –≥—Ä—É–ø: {selected_count}\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ª–∏—à–µ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –≥—Ä—É–ø."
    )


async def reset_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)

    if chat_id_str in notification_chats:
        notification_chats[chat_id_str]['groups'] = []
        await save_notification_chats()

    await query.edit_message_text("üßπ –í—Å—ñ –≥—Ä—É–ø–∏ —Å–∫–∏–Ω—É—Ç—ñ! –í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω—å.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –≤–∏–∫–ª–∏–∫—É (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ callback)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user = query.from_user
        message = query.message
    else:
        user = update.effective_user
        message = update.message

    user_id = user.id
    username = user.username
    chat_id = message.chat_id
    chat_id_str = str(chat_id)
    is_special = username and username.lower() in [u.lower() for u in SPECIAL_USERS]

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Ç—É
    if chat_id_str not in notification_chats:
        notification_chats[chat_id_str] = {
            'user_id': user_id,
            'username': username,
            'groups': [],
            'is_special': is_special
        }
    else:
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        notification_chats[chat_id_str]['user_id'] = user_id
        notification_chats[chat_id_str]['username'] = username
        notification_chats[chat_id_str]['is_special'] = is_special

    await save_notification_chats()

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if is_special:
        admin_status = "‚≠ê –í–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (–ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø)"
    elif is_admin(user_id):
        admin_status = "‚úÖ –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    else:
        admin_status = "‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if is_special:
        keyboard.append([
            InlineKeyboardButton("‚ûï –û–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É", callback_data="select_group"),
        ])
        keyboard.append([
            InlineKeyboardButton("üîî –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="check_notifications"),
            InlineKeyboardButton("üëÅÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏", callback_data="view_groups")
        ])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    elif is_admin(user_id):
        keyboard.append([
            InlineKeyboardButton("üîî –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="check_notifications"),
            InlineKeyboardButton("üëÅÔ∏è –ú–æ—è –≥—Ä—É–ø–∞", callback_data="view_groups")
        ])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    keyboard.append([
        InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh"),
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"üîî –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π! {admin_status}\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –∑–∞–ø–∏—Ç—É
    if update.callback_query:
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await message.reply_text(text, reply_markup=reply_markup)


async def account_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, phone = query.data.split(':')
    client = clients.get(phone)

    if client:
        group = client.account_data['group']
        status = "‚≠ê –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∞–∫–∞—É–Ω—Ç" if client.is_special else "üõü –ó–≤–∏—á–∞–π–Ω–∏–π –∞–∫–∞—É–Ω—Ç"

        await query.edit_message_text(
            f"‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç:\n\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üë§ –Ü–º'—è: {client.account_data['name']}\n"
            f"üè∑Ô∏è –ì—Ä—É–ø–∞: {group}\n"
            f"{status}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_account_group")]
            ])
        )


async def view_account_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = []
    for client in clients.values():
        account = client.account_data
        btn_text = f"{account['name']} ({account['phone']})"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"account_group:{account['phone']}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    await query.edit_message_text(
        "üë§ –û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –π–æ–≥–æ –≥—Ä—É–ø–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def set_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –Ø–∫—â–æ —Ü–µ –≤–∏–∫–ª–∏–∫ –∑ –∫–Ω–æ–ø–∫–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ query
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        update.message = query.message
        update.effective_chat = query.message.chat

    return await group_selection_required(update, context, _set_groups)


async def _set_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –≤–∏–∫–ª–∏–∫—É
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        chat = query.message.chat
        user = query.from_user
    else:
        chat = update.effective_chat
        user = update.effective_user

    username = user.username
    is_special = username and username.lower() in [u.lower() for u in SPECIAL_USERS]

    if not is_special:
        if update.callback_query:
            await query.edit_message_text("‚ùå –¢—ñ–ª—å–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –≤–∏–±–∏—Ä–∞—Ç–∏ –≥—Ä—É–ø–∏!")
        else:
            await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –≤–∏–±–∏—Ä–∞—Ç–∏ –≥—Ä—É–ø–∏!")
        return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)
    user_id = update.effective_user.id

    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏
    all_groups = set()
    special_groups = set()

    for client in clients.values():
        group = client.account_data['group']
        all_groups.add(group)
        if client.is_special:
            special_groups.add(group)

    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏
    if user_id not in SPECIAL_USERS:
        all_groups = all_groups - special_groups
        if not all_groups:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø –¥–ª—è –≤–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É.")
            return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥—Ä—É–ø
    keyboard = []
    current_row = []

    for group in sorted(all_groups):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä—É–ø–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞
        is_selected = False
        if chat_id_str in notification_chats and group in notification_chats[chat_id_str].get('groups', []):
            is_selected = True

        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏
        group_display = group
        if group in special_groups:
            group_display = f"‚≠ê {group}"

        btn_text = f"‚úÖ {group_display}" if is_selected else group_display
        current_row.append(InlineKeyboardButton(btn_text, callback_data=f"toggle_group:{group}"))

        if len(current_row) == 2:
            keyboard.append(current_row)
            current_row = []

    if current_row:
        keyboard.append(current_row)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è
    keyboard.append([
        InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="save_groups"),
        InlineKeyboardButton("üßπ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ", callback_data="reset_groups")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    selected_count = 0
    if chat_id_str in notification_chats:
        selected_count = len(notification_chats[chat_id_str].get('groups', []))

    # –î–æ–¥–∞—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏
    explanation = "\n\n‚≠ê - –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏ (–¥–æ—Å—Ç—É–ø–Ω—ñ –≤—Å—ñ–º –∞–∫–∞—É–Ω—Ç–∞–º)" if special_groups else ""

    await update.message.reply_text(
        f"üè∑Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–≤–∏–±—Ä–∞–Ω–æ: {selected_count}):{explanation}\n\n"
        "‚ÑπÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≥—Ä—É–ø—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó –∑—ñ —Å–ø–∏—Å–∫—É",
        reply_markup=reply_markup
    )


async def my_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _my_groups)


async def _my_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        chat_id = query.message.chat_id
        chat_id_str = str(chat_id)
    else:
        chat_id = update.effective_chat.id
        chat_id_str = str(chat_id)

    if chat_id_str not in notification_chats or not notification_chats[chat_id_str].get('groups'):
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–± –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è callback
        if query:
            await query.edit_message_text("‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        return

    groups = notification_chats[chat_id_str]['groups']
    response = "üè∑Ô∏è –í–∞—à—ñ –≤–∏–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏:\n\n" + "\n".join(f"‚Ä¢ `{group}`" for group in groups)

    # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –Ω–µ—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    user_id = update.effective_user.id
    if user_id not in SPECIAL_USERS:
        response += "\n\n‚ÑπÔ∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ —î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–± –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if query:
        await query.edit_message_text(response, parse_mode='Markdown')
    else:
        await update.message.reply_text(response, parse_mode='Markdown')


#async def toggle_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#    query = update.callback_query
#    await query.answer()
#
#    chat_id = query.message.chat_id
#    chat_id_str = str(chat_id)
#    action, group = query.data.split(':')
#
#    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∞—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
#    if chat_id_str not in notification_chats:
#        notification_chats[chat_id_str] = {
#            'user_id': query.from_user.id,
#            'groups': []
#        }
#
#    settings = notification_chats[chat_id_str]
#
#    # –î–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É–ø—É
#    if group in settings['groups']:
#        settings['groups'].remove(group)
#    else:
#        settings['groups'].append(group)
#
#    await save_notification_chats()
#    await show_group_selection(query, context)
#

async def _toggle_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    action, group = query.data.split(':')

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∞—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if chat_id_str not in notification_chats:
        notification_chats[chat_id_str] = {
            'user_id': query.from_user.id,
            'groups': []
        }

    settings = notification_chats[chat_id_str]

    # –î–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É–ø—É
    if group in settings['groups']:
        settings['groups'].remove(group)
    else:
        settings['groups'].append(group)

    await save_notification_chats()

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º —Å—Ç–∞–Ω–æ–º –∫–Ω–æ–ø–æ–∫
    await update_group_buttons(query)




async def _save_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    selected_count = 0

    if chat_id_str in notification_chats:
        selected_count = len(notification_chats[chat_id_str].get('groups', []))

    await query.edit_message_text(
        f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –≥—Ä—É–ø: {selected_count}\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ª–∏—à–µ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –≥—Ä—É–ø."
    )





async def _reset_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)

    if chat_id_str in notification_chats:
        notification_chats[chat_id_str]['groups'] = []
        await save_notification_chats()

    await query.edit_message_text("üßπ –í—Å—ñ –≥—Ä—É–ø–∏ —Å–∫–∏–Ω—É—Ç—ñ! –í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω—å.")


async def update_group_buttons(query):
    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    user_id = query.from_user.id

    # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏
    all_groups = set()
    special_groups = set()
    for client in clients.values():
        group = client.account_data['group']
        all_groups.add(group)
        if client.is_special:
            special_groups.add(group)

    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏
    if user_id not in SPECIAL_USERS:
        all_groups = all_groups - special_groups


    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Å—Ç–∞–Ω–∞–º–∏
    keyboard = []
    current_row = []

    for group in sorted(all_groups):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä—É–ø–∞ –≤–∏–±—Ä–∞–Ω–∞
        is_selected = False
        if chat_id_str in notification_chats and group in notification_chats[chat_id_str].get('groups', []):
            is_selected = True

        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏
        group_display = group
        if group in special_groups:
            group_display = f"‚≠ê {group}"

        btn_text = f"‚úÖ {group_display}" if is_selected else group_display
        current_row.append(InlineKeyboardButton(btn_text, callback_data=f"toggle_group:{group}"))

        if len(current_row) == 2:
            keyboard.append(current_row)
            current_row = []

    if current_row:
        keyboard.append(current_row)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è
    keyboard.append([
        InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="save_groups"),
        InlineKeyboardButton("üßπ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ", callback_data="reset_groups")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    selected_count = 0
    if chat_id_str in notification_chats:
        selected_count = len(notification_chats[chat_id_str].get('groups', []))

    await query.edit_message_text(
        f"üè∑Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–≤–∏–±—Ä–∞–Ω–æ: {selected_count}):\n\n"
        "‚ÑπÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≥—Ä—É–ø—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó –∑—ñ —Å–ø–∏—Å–∫—É",
        reply_markup=reply_markup
    )


async def check_unread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _check_unread)


async def _check_unread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        chat_id = query.message.chat_id
        chat_id_str = str(chat_id)
        message = query.message
    else:
        chat_id = update.effective_chat.id
        chat_id_str = str(chat_id)
        message = update.message

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É
    settings = notification_chats.get(chat_id_str, {})
    username = settings.get('username')
    is_special = username and username.lower() in [u.lower() for u in SPECIAL_USERS]
    user_groups = settings.get('groups', [])

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≥—Ä—É–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ó –ê–ö–ê–£–ù–¢–Ü–í
    admin_group = None
    user_id = update.effective_user.id

    # –®—É–∫–∞—î–º–æ –∞–∫–∞—É–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for client in clients.values():
        if client.me and client.me.id == user_id:
            admin_group = client.account_data.get('group', '')
            break

    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
    if not admin_group:
        admin_group = username if username else str(user_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="check_now")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏
    if is_special:
        groups_text = "–æ–±—Ä–∞–Ω–∏—Ö –≥—Ä—É–ø–∞—Ö" if user_groups else "–≤—Å—ñ—Ö –≥—Ä—É–ø–∞—Ö"
    else:
        groups_text = f"–≥—Ä—É–ø—ñ `{admin_group}`"

    message_text = f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É {groups_text}:"

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–± –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if query:
        await query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await message.reply_text(message_text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return

    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username
    is_special = username and username.lower() in [u.lower() for u in SPECIAL_USERS]
    chat_id_str = str(query.message.chat_id)

    if query.data == "select_group":
        if is_special:
            await show_group_selection(query, context)
        else:
            await query.edit_message_text("‚ùå –¶—è –¥—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")

    elif query.data == "check_notifications":
        if is_admin(user_id) or is_special:
            await check_unread(update, context)
        else:
            await query.edit_message_text("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!")

    elif query.data == "view_groups":
        if is_admin(user_id) or is_special:
            await show_accessible_groups(query, context)
        else:
            await query.edit_message_text("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!")
    elif query.data == "check_now":
        await handle_unread_messages(query, context)
    elif query.data == "refresh":
        await start(update, context)

    elif query.data == "close":
        await query.delete_message()

        # ADD HANDLER FOR BACK BUTTONS
    elif query.data == "back_to_main":
        await start(update, context)
    elif query.data == "view_account_group":
        await view_account_group(update, context)


async def handle_unread_messages(query, context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    await query.edit_message_text("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É
    settings = notification_chats.get(chat_id_str, {})
    username = settings.get('username')
    is_special = username and username.lower() in [u.lower() for u in SPECIAL_USERS]
    user_groups = settings.get('groups', [])

    # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = query.from_user.id

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≥—Ä—É–ø–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    if is_special:
        # –î–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ - –≤—Å—ñ –æ–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏
        groups_to_check = user_groups
    else:
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ - —à—É–∫–∞—î–º–æ –≥—Ä—É–ø—É –∑ –∞–∫–∞—É–Ω—Ç–∞
        groups_to_check = []

        # –®—É–∫–∞—î–º–æ –∞–∫–∞—É–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for client in clients.values():
            if client.me and client.me.id == user_id:
                group = client.account_data.get('group', '')
                if group:
                    groups_to_check = [group]
                    break

        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        if not groups_to_check:
            groups_to_check = [username] if username else [str(user_id)]

    messages = []
    accounts_in_group = 0

    for phone, client in list(clients.items()):
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø—É –∫–ª—ñ—î–Ω—Ç–∞
            client_group = client.account_data.get('group', '')

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä—É–ø–∞ –∫–ª—ñ—î–Ω—Ç–∞ –≤—Ö–æ–¥–∏—Ç—å —É —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            if groups_to_check and client_group not in groups_to_check:
                continue

            accounts_in_group += 1  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ

            if not client.is_running:
                await client.start()

            unread_dialogs = []

            async for dialog in client.client.iter_dialogs():
                # –Ü–≥–Ω–æ—Ä—É—î–º–æ –±–æ—Ç—ñ–≤, –≥—Ä—É–ø–∏ —ñ –∫–∞–Ω–∞–ª–∏
                if not isinstance(dialog.entity, types.User) or dialog.entity.bot:
                    continue

                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –¥—ñ–∞–ª–æ–≥–∏ –∑ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º–∏
                if dialog.unread_count > 0:
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    user = dialog.entity
                    username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
                    if not username:
                        username = f"user_{user.id}"

                    unread_dialogs.append({
                        'username': username,
                        'count': dialog.unread_count,
                        'user_id': user.id
                    })

            if not unread_dialogs:
                messages.append({
                    'account': client.account_data['name'],
                    'status': "‚úÖ –ù–µ–º–∞—î –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
                    'group': client_group
                })
            else:
                messages.append({
                    'account': client.account_data['name'],
                    'dialogs': unread_dialogs,
                    'total': sum(d['count'] for d in unread_dialogs),
                    'group': client_group
                })

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
            messages.append({
                'account': client.account_data['name'],
                'status': f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)[:100]}",
                'group': client.account_data.get('group', '')
            })

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–∞—Å—Ç–∏–Ω–∞–º–∏
    if accounts_in_group == 0:
        group_text = ", ".join(groups_to_check) if groups_to_check else "–≥—Ä—É–ø–∞—Ö"

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –≥—Ä—É–ø –∑ –∞–∫–∞—É–Ω—Ç—ñ–≤
        all_groups = set()
        for client in clients.values():
            group = client.account_data.get('group', '')
            if group:
                all_groups.add(group)

        await query.edit_message_text(
            f"‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫–∞—É–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø–∞—Ö: {group_text}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏: {', '.join(all_groups) if all_groups else '–Ω–µ–º–∞—î –≥—Ä—É–ø –≤ –∞–∫–∞—É–Ω—Ç–∞—Ö'}"
        )
        return

    response_parts = ["üì¨ **–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:**\n\n"]

    for msg in messages:
        account_line = f"üë§ **{msg['account']}**\nüè∑Ô∏è –ì—Ä—É–ø–∞: `{msg['group']}`\n"

        if 'dialogs' in msg:
            dialogs_text = f"üî¢ –í—Å—å–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö: {msg['total']}\n"
            for dialog in msg['dialogs']:
                dialogs_text += f"üë§ `{dialog['username']}`: {dialog['count']} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö\n"

            # –î–æ–¥–∞—î–º–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
            if len(response_parts[-1]) + len(account_line) + len(dialogs_text) > 3800:
                response_parts.append("")

            response_parts[-1] += account_line + dialogs_text + "\n"
        else:
            if len(response_parts[-1]) + len(account_line) + len(msg['status']) > 3800:
                response_parts.append("")

            response_parts[-1] += account_line + msg['status'] + "\n\n"

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    for i, part in enumerate(response_parts):
        if i == 0:
            await query.edit_message_text(
                text=part,
                parse_mode='Markdown'
            )
        else:
            await bot.send_message(
                chat_id=query.message.chat_id,
                text=part,
                parse_mode='Markdown'
            )


async def manage_special(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    user_id = update.effective_user.id
    if user_id not in SPECIAL_USERS:
        await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
        return


async def _manage_special(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
    keyboard = []
    for phone, client in clients.items():
        account = client.account_data
        status = "‚úÖ" if client.is_special else "‚ùå"
        btn_text = f"{status} {account['name']} ({account['phone']})"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"toggle_special:{phone}")])

    keyboard.append([InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏", callback_data="save_special")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚≠ê –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ –∞–∫–∞—É–Ω—Ç–∞–º–∏:\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=reply_markup
    )


async def toggle_special_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _toggle_special_handler)


async def _toggle_special_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, phone = query.data.split(':')
    client = clients.get(phone)

    if client:
        # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        client.is_special = not client.is_special
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞
        client.account_data['is_special'] = client.is_special

        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
        await update_special_buttons(query)


async def update_special_buttons(query):
    keyboard = []
    for phone, client in clients.items():
        account = client.account_data
        status = "‚úÖ" if client.is_special else "‚ùå"
        btn_text = f"{status} {account['name']} ({account['phone']})"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"toggle_special:{phone}")])

    keyboard.append([InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏", callback_data="save_special")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "‚≠ê –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ –∞–∫–∞—É–Ω—Ç–∞–º–∏:\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=reply_markup
    )


async def save_special_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ —É —Ñ–∞–π–ª
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
        if os.path.exists(ACCOUNTS_FILE):
            with open(ACCOUNTS_FILE, 'rb') as f:
                data = pickle.load(f)
        else:
            data = {"accounts": [], "groups": []}

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
        for i, account in enumerate(data['accounts']):
            for client in clients.values():
                if account['phone'] == client.account_data['phone']:
                    data['accounts'][i]['is_special'] = client.is_special

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        with open(ACCOUNTS_FILE, 'wb') as f:
            pickle.dump(data, f, protocol=pickle.HIGHEST_PROTOCOL)

        await query.edit_message_text("‚úÖ –ó–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
        await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {str(e)}")




async def check_accounts_updates():
    """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∞–∫–∞—É–Ω—Ç—ñ–≤"""
    global last_accounts_check

    while True:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)

            # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫–∞—É–Ω—Ç–∏, —è–∫—â–æ —Ñ–∞–π–ª –∑–º—ñ–Ω–∏–≤—Å—è
            if await load_accounts():
                logger.info("–û–Ω–æ–≤–ª–µ–Ω–æ –∞–∫–∞—É–Ω—Ç–∏ –∑ —Ñ–∞–π–ª—É")

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                for client in clients.values():
                    if client.is_running:
                        asyncio.create_task(message_listener(client))
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")


async def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    await load_notification_chats()
    await load_accounts()

    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_groups", set_groups))
    application.add_handler(CommandHandler("my_groups", my_groups))
    application.add_handler(CommandHandler("check_unread", check_unread))
    application.add_handler(CommandHandler("manage_special", manage_special))
    # –£ —Ñ—É–Ω–∫—Ü—ñ—ó main:
    application.add_handler(CommandHandler("set_groups",
                                           lambda update, context: group_selection_required(update, context,
                                                                                            set_groups)))

    application.add_handler(CallbackQueryHandler(
        lambda update, context: group_selection_required(update, context, toggle_group_handler),
        pattern="^toggle_group:"))

    application.add_handler(CallbackQueryHandler(
        lambda update, context: group_selection_required(update, context, save_groups_handler),
        pattern="^save_groups$"))

    application.add_handler(CallbackQueryHandler(
        lambda update, context: group_selection_required(update, context, reset_groups_handler),
        pattern="^reset_groups$"))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^check_now$"))
    application.add_handler(CallbackQueryHandler(toggle_group_handler, pattern="^toggle_group:"))
    application.add_handler(CallbackQueryHandler(save_groups_handler, pattern="^save_groups$"))
    application.add_handler(CallbackQueryHandler(reset_groups_handler, pattern="^reset_groups$"))
    application.add_handler(CallbackQueryHandler(toggle_special_handler, pattern="^toggle_special:"))
    application.add_handler(CallbackQueryHandler(save_special_handler, pattern="^save_special$"))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(account_group_handler, pattern="^account_group:"))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(
        lambda update, context: group_selection_required(update, context, group_button_handler),
        pattern="^(toggle_group|save_groups|reset_groups|back_to_main)"
    ))
    # –ó–∞–ø—É—Å–∫ —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    for client in clients.values():
        if client.is_running:
            asyncio.create_task(message_listener(client))

    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    asyncio.create_task(process_message_queue(application.bot))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å –∞–∫–∞—É–Ω—Ç—ñ–≤
    asyncio.create_task(check_accounts_updates())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    try:
        while True:
            await asyncio.sleep(3600)
    except asyncio.CancelledError:
        pass
    finally:
        # –ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        for client in clients.values():
            await client.stop()


if __name__ == "__main__":
    asyncio.run(main())
