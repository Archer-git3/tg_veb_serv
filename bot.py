import os
import json
import asyncio
import logging
from datetime import datetime
from telethon import TelegramClient, events, errors, types
from telethon.sessions import StringSession
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import time

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
API_ID = 29148113
API_HASH = "0fba92868b9d99d1e63583a8fb751fb4"
BOT_TOKEN = "7603687034:AAG9102_4yFSuHrwE17FgO-Fc8nnfL1Z4-8"
ACCOUNTS_FILE = "telegram_accounts.json"
NOTIFICATION_CHATS_FILE = "notification_chats.json"
ADMINS_FILE = "admins.json"
LOG_FILE = "bot.log"
SESSION_TIMEOUT = 60
ACCOUNTS_CHECK_INTERVAL = 30

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
if os.path.exists(LOG_FILE):
    os.remove(LOG_FILE)

logging.basicConfig(
    filename=LOG_FILE,
    encoding='utf-8',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logger.info("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ ===")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
clients = {}
notification_chats = {}
admins = set()
message_queue = asyncio.Queue()
user_groups = {}
last_accounts_check = 0
last_accounts_mtime = 0


class AccountClient:
    def __init__(self, account_data):
        self.account_data = account_data
        self.client = None
        self.is_running = False
        self.me = None

    async def start(self):
        if self.client and self.client.is_connected():
            return True

        try:
            self.client = TelegramClient(
                StringSession(self.account_data['session_string']),
                API_ID,
                API_HASH,
                timeout=SESSION_TIMEOUT
            )
            await self.client.connect()

            if not await self.client.is_user_authorized():
                logger.error(f"–ö–ª—ñ—î–Ω—Ç {self.account_data['name']} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")
                return False

            self.me = await self.client.get_me()
            self.is_running = True
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–ª—ñ—î–Ω—Ç–∞ {self.account_data['name']}: {e}")
            return False

    async def stop(self):
        if self.client and self.client.is_connected():
            await self.client.disconnect()
        self.is_running = False


async def load_accounts():
    global last_accounts_mtime, admins

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É
        current_mtime = os.path.getmtime(ACCOUNTS_FILE)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –∑–º—ñ–Ω–∏–≤—Å—è
        if current_mtime <= last_accounts_mtime:
            return False

        last_accounts_mtime = current_mtime

        with open(ACCOUNTS_FILE, 'r', encoding='utf-8') as f:
            accounts = json.load(f)

        # –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–ª—ñ—î–Ω—Ç–∏
        for client in list(clients.values()):
            await client.stop()
        clients.clear()

        # –û—á–∏—â–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ–≤ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤–∏—Ö
        admins.clear()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—ñ –∞–∫–∞—É–Ω—Ç–∏
        for account in accounts:
            if account.get('skip_check', False):
                continue

            client = AccountClient(account)
            if await client.start():
                clients[account['phone']] = client
                logger.info(f"–ê–∫–∞—É–Ω—Ç {account['name']} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

                # –Ø–∫—â–æ –∞–∫–∞—É–Ω—Ç —î –∞–¥–º—ñ–Ω–æ–º, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ user_id
                if account.get('is_admin', False) and client.me:
                    admins.add(client.me.id)
                    logger.info(f"–î–æ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {client.me.id}")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ–≤ —É —Ñ–∞–π–ª
        await save_admins()

        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
        return False


async def load_admins():
    global admins
    try:
        if os.path.exists(ADMINS_FILE):
            with open(ADMINS_FILE, 'r', encoding='utf-8') as f:
                admins = set(json.load(f))
                logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {admins}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {e}")
        admins = set()


async def save_admins():
    try:
        with open(ADMINS_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(admins), f)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {e}")


async def check_accounts_updates():
    """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∞–∫–∞—É–Ω—Ç—ñ–≤"""
    global last_accounts_check

    while True:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)

            # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫–∞—É–Ω—Ç–∏, —è–∫—â–æ —Ñ–∞–π–ª –∑–º—ñ–Ω–∏–≤—Å—è
            if await load_accounts():
                logger.info("–û–Ω–æ–≤–ª–µ–Ω–æ –∞–∫–∞—É–Ω—Ç–∏ –∑ —Ñ–∞–π–ª—É")

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                for client in clients.values():
                    if client.is_running:
                        asyncio.create_task(message_listener(client))
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")


async def load_notification_chats():
    global notification_chats
    try:
        if os.path.exists(NOTIFICATION_CHATS_FILE):
            with open(NOTIFICATION_CHATS_FILE, 'r', encoding='utf-8') as f:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç —É –Ω–æ–≤–∏–π
                old_data = json.load(f)
                notification_chats = {}

                for key, value in old_data.items():
                    # –Ø–∫—â–æ —Ü–µ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç (chat_id: int)
                    if isinstance(value, int):
                        notification_chats[key] = {
                            'user_id': int(key),
                            'groups': []
                        }
                    else:
                        notification_chats[key] = value
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤: {e}")
        notification_chats = {}


async def save_notification_chats():
    try:
        with open(NOTIFICATION_CHATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(notification_chats, f, indent=2)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤: {e}")


async def message_listener(client: AccountClient):
    @client.client.on(events.NewMessage(incoming=True))
    async def handler(event):
        try:
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–ª–∞—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if event.message.sender_id == client.me.id:
                return

            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç—ñ–≤
            sender = await event.get_sender()
            if isinstance(sender, types.User) and sender.bot:
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not isinstance(event.message.peer_id, types.PeerUser):
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            sender_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            if sender:
                sender_name = sender.username or f"{sender.first_name or ''} {sender.last_name or ''}".strip()
                if not sender_name:
                    sender_name = f"user_{sender.id}"

            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text = ""
            if event.message.text:
                message_text = event.message.text[:1000] + '...' if len(
                    event.message.text) > 1000 else event.message.text
            elif event.message.media:
                message_text = "üì∑ –ú–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"

            message_info = {
                'account': client.account_data['name'],
                'sender': sender_name,
                'text': message_text,
                'date': event.message.date.isoformat(),
                'phone': client.account_data['phone'],
                'group': client.account_data['group'],
                'sender_id': sender.id if sender else 0
            }
            await message_queue.put(message_info)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


async def process_message_queue(bot: Bot):
    while True:
        message = await message_queue.get()
        for chat_id_str, settings in notification_chats.items():
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä—É–ø–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Ö–æ–¥–∏—Ç—å —É –≤–∏–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏
                if 'groups' not in settings or message['group'] not in settings['groups']:
                    continue

                text = (
                    f"üîî **–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!**\n"
                    f"üë§ –ê–∫–∞—É–Ω—Ç: `{message['account']}`\n"
                    f"üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: `{message['sender']}`\n"
                    f"üìÖ –î–∞—Ç–∞: `{message['date']}`\n"
                    f"üè∑Ô∏è –ì—Ä—É–ø–∞: `{message['group']}`\n"
                    f"\n{message['text']}"
                )
                await bot.send_message(
                    chat_id=int(chat_id_str),
                    text=text,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
        message_queue.task_done()


def is_admin(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in admins


async def admin_required(update: Update, context: ContextTypes.DEFAULT_TYPE, handler):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        if update.callback_query:
            await update.callback_query.answer("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        elif update.message:
            await update.message.reply_text("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return None
    return await handler(update, context)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∞—Ç—É
    if chat_id_str not in notification_chats:
        notification_chats[chat_id_str] = {
            'user_id': user_id,
            'groups': []
        }
    else:
        # –û–Ω–æ–≤–ª—é—î–º–æ user_id –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ —á–∞—Ç—É
        notification_chats[chat_id_str]['user_id'] = user_id

    await save_notification_chats()

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin_status = "‚úÖ –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin(user_id) else "‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"

    await update.message.reply_text(
        f"üîî –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π! {admin_status}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å\n"
        "/set_groups - –í–∏–±—Ä–∞—Ç–∏ –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n"
        "/check_unread - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö\n"
        "/my_groups - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏"
    )


async def set_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _set_groups)


async def _set_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏ –∑ —É—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
    all_groups = set()
    for client in clients.values():
        all_groups.add(client.account_data['group'])

    if not all_groups:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø –¥–ª—è –≤–∏–±–æ—Ä—É.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥—Ä—É–ø
    keyboard = []
    current_row = []

    for group in sorted(all_groups):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä—É–ø–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞
        is_selected = False
        if chat_id_str in notification_chats and group in notification_chats[chat_id_str].get('groups', []):
            is_selected = True

        btn_text = f"‚úÖ {group}" if is_selected else group
        current_row.append(InlineKeyboardButton(btn_text, callback_data=f"toggle_group:{group}"))

        if len(current_row) == 2:
            keyboard.append(current_row)
            current_row = []

    if current_row:
        keyboard.append(current_row)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è
    keyboard.append([
        InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="save_groups"),
        InlineKeyboardButton("üßπ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ", callback_data="reset_groups")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    selected_count = 0
    if chat_id_str in notification_chats:
        selected_count = len(notification_chats[chat_id_str].get('groups', []))

    await update.message.reply_text(
        f"üè∑Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–≤–∏–±—Ä–∞–Ω–æ: {selected_count}):\n\n"
        "‚ÑπÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≥—Ä—É–ø—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó –∑—ñ —Å–ø–∏—Å–∫—É",
        reply_markup=reply_markup
    )


async def my_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _my_groups)


async def _my_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)

    if chat_id_str not in notification_chats or not notification_chats[chat_id_str].get('groups'):
        await update.message.reply_text("‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        return

    groups = notification_chats[chat_id_str]['groups']
    response = "üè∑Ô∏è –í–∞—à—ñ –≤–∏–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏:\n\n" + "\n".join(f"‚Ä¢ `{group}`" for group in groups)

    await update.message.reply_text(response, parse_mode='Markdown')


async def toggle_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _toggle_group_handler)


async def _toggle_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    action, group = query.data.split(':')

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∞—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if chat_id_str not in notification_chats:
        notification_chats[chat_id_str] = {
            'user_id': query.from_user.id,
            'groups': []
        }

    settings = notification_chats[chat_id_str]

    # –î–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É–ø—É
    if group in settings['groups']:
        settings['groups'].remove(group)
    else:
        settings['groups'].append(group)

    await save_notification_chats()

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º —Å—Ç–∞–Ω–æ–º –∫–Ω–æ–ø–æ–∫
    await update_group_buttons(query)


async def save_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _save_groups_handler)


async def _save_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    selected_count = 0

    if chat_id_str in notification_chats:
        selected_count = len(notification_chats[chat_id_str].get('groups', []))

    await query.edit_message_text(
        f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –≥—Ä—É–ø: {selected_count}\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ª–∏—à–µ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –≥—Ä—É–ø."
    )


async def reset_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _reset_groups_handler)


async def _reset_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)

    if chat_id_str in notification_chats:
        notification_chats[chat_id_str]['groups'] = []
        await save_notification_chats()

    await query.edit_message_text("üßπ –í—Å—ñ –≥—Ä—É–ø–∏ —Å–∫–∏–Ω—É—Ç—ñ! –í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω—å.")


async def update_group_buttons(query):
    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏ –∑ —É—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
    all_groups = set()
    for client in clients.values():
        all_groups.add(client.account_data['group'])

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Å—Ç–∞–Ω–∞–º–∏
    keyboard = []
    current_row = []

    for group in sorted(all_groups):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä—É–ø–∞ –≤–∏–±—Ä–∞–Ω–∞
        is_selected = False
        if chat_id_str in notification_chats and group in notification_chats[chat_id_str].get('groups', []):
            is_selected = True

        btn_text = f"‚úÖ {group}" if is_selected else group
        current_row.append(InlineKeyboardButton(btn_text, callback_data=f"toggle_group:{group}"))

        if len(current_row) == 2:
            keyboard.append(current_row)
            current_row = []

    if current_row:
        keyboard.append(current_row)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è
    keyboard.append([
        InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="save_groups"),
        InlineKeyboardButton("üßπ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ", callback_data="reset_groups")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    selected_count = 0
    if chat_id_str in notification_chats:
        selected_count = len(notification_chats[chat_id_str].get('groups', []))

    await query.edit_message_text(
        f"üè∑Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–≤–∏–±—Ä–∞–Ω–æ: {selected_count}):\n\n"
        "‚ÑπÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≥—Ä—É–ø—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó –∑—ñ —Å–ø–∏—Å–∫—É",
        reply_markup=reply_markup
    )


async def check_unread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _check_unread)


async def _check_unread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –≥—Ä—É–ø–∏
    if chat_id_str not in notification_chats or not notification_chats[chat_id_str].get('groups'):
        await update.message.reply_text(
            "‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –≥—Ä—É–ø–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /set_groups —â–æ–± –≤–∏–±—Ä–∞—Ç–∏ –≥—Ä—É–ø–∏."
        )
        return

    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="check_now")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:",
        reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_required(update, context, _button_handler)


async def _button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "check_now":
        await handle_unread_messages(query, context.bot)


async def handle_unread_messages(query, bot):
    chat_id = query.message.chat_id
    chat_id_str = str(chat_id)
    await query.edit_message_text("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏
    selected_groups = []
    if chat_id_str in notification_chats:
        selected_groups = notification_chats[chat_id_str].get('groups', [])

    messages = []
    for phone, client in list(clients.items()):
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–∫–∞—É–Ω—Ç–∏, —è–∫—ñ –Ω–µ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –≤–∏–±—Ä–∞–Ω–∏—Ö –≥—Ä—É–ø
            if selected_groups and client.account_data['group'] not in selected_groups:
                continue

            if not client.is_running:
                await client.start()

            unread_dialogs = []

            async for dialog in client.client.iter_dialogs():
                # –Ü–≥–Ω–æ—Ä—É—î–º–æ –±–æ—Ç—ñ–≤, –≥—Ä—É–ø–∏ —ñ –∫–∞–Ω–∞–ª–∏
                if not isinstance(dialog.entity, types.User) or dialog.entity.bot:
                    continue

                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –¥—ñ–∞–ª–æ–≥–∏ –∑ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º–∏
                if dialog.unread_count > 0:
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    user = dialog.entity
                    username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
                    if not username:
                        username = f"user_{user.id}"

                    unread_dialogs.append({
                        'username': username,
                        'count': dialog.unread_count,
                        'user_id': user.id
                    })

            if not unread_dialogs:
                messages.append({
                    'account': client.account_data['name'],
                    'status': "‚úÖ –ù–µ–º–∞—î –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
                    'group': client.account_data['group']
                })
            else:
                messages.append({
                    'account': client.account_data['name'],
                    'dialogs': unread_dialogs,
                    'total': sum(d['count'] for d in unread_dialogs),
                    'group': client.account_data['group']
                })

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
            messages.append({
                'account': client.account_data['name'],
                'status': f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)[:100]}",
                'group': client.account_data['group']
            })

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–∞—Å—Ç–∏–Ω–∞–º–∏
    if not messages:
        await query.edit_message_text("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–±–æ –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –º–∞—é—Ç—å –ø–æ–º–∏–ª–∫–∏")
        return

    response_parts = ["üì¨ **–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:**\n\n"]

    for msg in messages:
        account_line = f"üë§ **{msg['account']}**\nüè∑Ô∏è –ì—Ä—É–ø–∞: `{msg['group']}`\n"

        if 'dialogs' in msg:
            dialogs_text = f"üî¢ –í—Å—å–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö: {msg['total']}\n"
            for dialog in msg['dialogs']:
                dialogs_text += f"üë§ `{dialog['username']}`: {dialog['count']} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö\n"

            # –î–æ–¥–∞—î–º–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
            if len(response_parts[-1]) + len(account_line) + len(dialogs_text) > 3800:
                response_parts.append("")

            response_parts[-1] += account_line + dialogs_text + "\n"
        else:
            if len(response_parts[-1]) + len(account_line) + len(msg['status']) > 3800:
                response_parts.append("")

            response_parts[-1] += account_line + msg['status'] + "\n\n"

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    for i, part in enumerate(response_parts):
        if i == 0:
            await query.edit_message_text(
                text=part,
                parse_mode='Markdown'
            )
        else:
            await bot.send_message(
                chat_id=query.message.chat_id,
                text=part,
                parse_mode='Markdown'
            )


async def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    await load_admins()
    await load_notification_chats()
    await load_accounts()

    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_groups", set_groups))
    application.add_handler(CommandHandler("my_groups", my_groups))
    application.add_handler(CommandHandler("check_unread", check_unread))

    application.add_handler(CallbackQueryHandler(button_handler, pattern="^check_now$"))
    application.add_handler(CallbackQueryHandler(toggle_group_handler, pattern="^toggle_group:"))
    application.add_handler(CallbackQueryHandler(save_groups_handler, pattern="^save_groups$"))
    application.add_handler(CallbackQueryHandler(reset_groups_handler, pattern="^reset_groups$"))

    # –ó–∞–ø—É—Å–∫ —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    for client in clients.values():
        if client.is_running:
            asyncio.create_task(message_listener(client))

    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    asyncio.create_task(process_message_queue(application.bot))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å –∞–∫–∞—É–Ω—Ç—ñ–≤
    asyncio.create_task(check_accounts_updates())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    try:
        while True:
            await asyncio.sleep(3600)
    except asyncio.CancelledError:
        pass
    finally:
        # –ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        for client in clients.values():
            await client.stop()


if __name__ == "__main__":
    asyncio.run(main())